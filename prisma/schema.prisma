generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ABAC-style Role
model Role {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String           @unique
  users       User[]
  permissions RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Permissions associated with a specific Role and Module
model RolePermission {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  roleId         String @db.ObjectId
  moduleId       String @db.ObjectId
  permissionBits Int // Bitmask permissions

  role   Role   @relation(fields: [roleId], references: [id])
  module Module @relation(fields: [moduleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roleId, moduleId])
}

// Individual permission definitions (view, edit, delete, etc.)
model Permission {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String @unique
  bitmask Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modular structure (with self-referencing for hierarchy)
model Module {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String   @unique
  path     String?
  parentId String?  @db.ObjectId
  parent   Module?  @relation("ModuleParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Module[] @relation("ModuleParent")
  groupId  String?  @db.ObjectId
  group    Group?   @relation(fields: [groupId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RolePermission RolePermission[]
}

// Users
model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  email        String         @unique
  roleId       String         @db.ObjectId
  role         Role           @relation(fields: [roleId], references: [id])
  auditLog     AuditLog[]
  subscription Subscription[]

  // Optional fields
  firstName    String?
  lastName     String?
  username     String?
  password     String?
  phone        String?
  organization String?
  state        String?
  city         String?
  ip           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Grouping of modules (e.g. Dashboard, Settings, etc.)
model Group {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  modules Module[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  action    String
  entity    String
  userId    String   @db.ObjectId
  details   Json
  device    Json?
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Notification {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  message String
  userId  String?
  status  String
  read    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  userId       String  @db.ObjectId
  subscription Json
  topic        String?
  user         User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
